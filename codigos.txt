##settings.py

"""
Django settings for petvida project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)lfx311!mr_-ymko-=sj2)y3&q8zwgz&iys!004ys%2b60p+)%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'clinica',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'petvida.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'petvida.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'petvida02',
        'USER': 'carlos',
        'PASSWORD': 'Ktmsx-350f',
        'HOST': 'localhost',  # ou IP se for remoto
        'PORT': '3306',       # ou outro se diferente
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        }
    }
}



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

##petvida/urls.py


from django.contrib import admin
from django.urls import path, include
from clinica.urls import *

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('clinica.urls')),
]

## clinica/urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('clinica/menu', views.menu, name='menu'),
    path('cliente/cadastrar/', views.cadastrar_cliente, name='cadastrar_cliente'),
    path('animal/cadastrar/', views.cadastrar_animal, name='cadastrar_animal'),
    path('veterinario/cadastrar/', views.cadastrar_veterinario, name='cadastrar_veterinario'),
    path('vacina/cadastrar/', views.cadastrar_vacina, name='cadastrar_vacina'),
    path('cconsulta/cadastrar', views.cadastrar_consulta, name='cadastrar_consulta'),
    path('aplicacao_vacina/cadastrar', views.cadastrar_aplicacao_vacina, name='cadastrar_aplicacao_vacina'),
    path('agendamento/cadastrar', views.cadastrar_agendamento, name='cadastrar_agendamento'),
    path('tratamento_realizado/cadastrar', views.cadastrar_tratamento_realizado, name='cadastrar_tratamento_realizado'),

    path('clientes/', views.listar_clientes, name='listar_clientes'),
    path('veterinarios/', views.listar_veterinarios, name='listar_veterinarios'),
    path('animais/', views.listar_animais, name='listar_animais'),
    path('vacinas/', views.listar_vacinas, name='listar_vacinas'),
    path('historico/<int:animal_id>/', views.historico_clinico, name='historico_clinico'),
    path('buscar-animal/', views.buscar_animal, name='buscar_animal'),

    path('clientes/editar/<int:pk>/', views.editar_cliente, name='editar_cliente'),
    path('clientes/excluir/<int:pk>/', views.excluir_cliente, name='excluir_cliente'),

]

##models.py

from django.db import models

class Cliente(models.Model):
    nome_completo = models.CharField("Nome completo", max_length=100)
    cpf = models.CharField("CPF", max_length=14, unique=True)
    telefone = models.CharField("Telefone", max_length=20)
    email = models.EmailField("Email", blank=True, null=True)
    endereco = models.CharField("Endereço", max_length=255)

    def __str__(self):
        return f"{self.nome_completo} ({self.cpf})"

class Animal(models.Model):
    nome = models.CharField("Nome do animal", max_length=100)
    especie = models.CharField("Espécie", max_length=50)
    raca = models.CharField("Raça", max_length=50)
    data_nascimento = models.DateField("Data de nascimento")
    porte = models.CharField("Porte", max_length=30)
    peso = models.DecimalField("Peso (kg)", max_digits=5, decimal_places=2)
    id_cliente = models.ForeignKey(Cliente, on_delete=models.CASCADE, verbose_name="Tutor")

    def __str__(self):
        return f"{self.nome} - {self.especie} ({self.id_cliente.nome_completo})"

class Veterinario(models.Model):
    nome = models.CharField("Nome", max_length=100)
    crmv = models.CharField("CRMV", max_length=20, unique=True)
    especialidade = models.CharField("Especialidade", max_length=100)
    telefone = models.CharField("Telefone", max_length=20)

    def __str__(self):
        return f"{self.nome} ({self.especialidade})"

class Consulta(models.Model):
    id_animal = models.ForeignKey(Animal, on_delete=models.CASCADE, verbose_name="Animal")
    id_veterinario = models.ForeignKey(Veterinario, on_delete=models.SET_NULL, null=True, verbose_name="Veterinário")
    data_consulta = models.DateField("Data da consulta")
    hora_consulta = models.TimeField("Hora da consulta")
    descricao = models.TextField("Descrição do atendimento")

    def __str__(self):
        return f"Consulta de {self.id_animal.nome} em {self.data_consulta}"

class Vacina(models.Model):
    nome_vacina = models.CharField("Nome da vacina", max_length=100)
    tipo_vacina = models.CharField("Tipo", max_length=50)

    def __str__(self):
        return f"{self.nome_vacina} ({self.tipo_vacina})"

class AplicacaoVacina(models.Model):
    id_animal = models.ForeignKey(Animal, on_delete=models.CASCADE, verbose_name="Animal")
    id_vacina = models.ForeignKey(Vacina, on_delete=models.CASCADE, verbose_name="Vacina")
    id_veterinario = models.ForeignKey(Veterinario, on_delete=models.SET_NULL, null=True, verbose_name="Veterinário")
    data_aplicacao = models.DateField("Data de aplicação")

    def __str__(self):
        return f"{self.id_vacina.nome_vacina} - {self.id_animal.nome} em {self.data_aplicacao}"

class Tratamento(models.Model):
    nome_tratamento = models.CharField("Nome do tratamento", max_length=100)
    tipo_tratamento  = models.CharField("Tipo de Tratamento", max_length=50 , default="teste")
    descricao = models.TextField("Descrição")

    def __str__(self):
        return self.nome_tratamento

class RealizacaoTratamento(models.Model):
    id_animal = models.ForeignKey(Animal, on_delete=models.CASCADE, verbose_name="Animal")
    id_tratamento = models.ForeignKey(Tratamento, on_delete=models.CASCADE, verbose_name="Tratamento")
    id_veterinario = models.ForeignKey(Veterinario, on_delete=models.SET_NULL, null=True, verbose_name="Veterinário")
    data_realizacao = models.DateField("Data de realização")
    observacoes = models.TextField("Observações")

    def __str__(self):
        return f"{self.id_tratamento.nome_tratamento} - {self.id_animal.nome} em {self.data_realizacao}"

class Agendamento(models.Model):
    id_animal = models.ForeignKey(Animal, on_delete=models.CASCADE, verbose_name="Animal")
    id_veterinario = models.ForeignKey(Veterinario, on_delete=models.SET_NULL, null=True, verbose_name="Veterinário")
    data_agendamento = models.DateField("Data")
    hora_agendamento = models.TimeField("Hora")
    tipo_servico = models.CharField("Tipo de serviço", max_length=100)
    observacoes = models.TextField("Observações", blank=True, null=True)

    def __str__(self):
        return f"{self.tipo_servico} - {self.id_animal.nome} em {self.data_agendamento}"

## forms.py

from django import forms
from .models import (
    Cliente, Animal, Veterinario, Vacina,
    Consulta, AplicacaoVacina, Tratamento,
    RealizacaoTratamento, Agendamento
)

class ClienteForm(forms.ModelForm):
    class Meta:
        model = Cliente
        fields = '__all__'
        widgets = {
            'nome_completo': forms.TextInput(attrs={'class': 'form-control'}),
            'cpf': forms.TextInput(attrs={'class': 'form-control'}),
            'telefone': forms.TextInput(attrs={'class': 'form-control'}),
            'email': forms.EmailInput(attrs={'class': 'form-control'}),
            'endereco': forms.TextInput(attrs={'class': 'form-control'}),
        }

class VeterinarioForm(forms.ModelForm):
    class Meta:
        model = Veterinario
        fields = '__all__'
        widgets = {
            'nome': forms.TextInput(attrs={'class': 'form-control'}),
            'crmv': forms.TextInput(attrs={'class': 'form-control'}),
            'especialidade': forms.TextInput(attrs={'class': 'form-control'}),
            'telefone': forms.TextInput(attrs={'class': 'form-control'}),
        }

class AnimalForm(forms.ModelForm):
    class Meta:
        model = Animal
        fields = '__all__'
        widgets = {
            'nome': forms.TextInput(attrs={'class': 'form-control'}),
            'especie': forms.TextInput(attrs={'class': 'form-control'}),
            'raca': forms.TextInput(attrs={'class': 'form-control'}),
            'data_nascimento': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'porte': forms.TextInput(attrs={'class': 'form-control'}),
            'peso': forms.NumberInput(attrs={'class': 'form-control'}),
            'id_cliente': forms.Select(attrs={'class': 'form-control'}),
        }

class VacinaForm(forms.ModelForm):
    class Meta:
        model = Vacina
        fields = '__all__'
        widgets = {
            'nome_vacina': forms.TextInput(attrs={'class': 'form-control'}),
            'tipo_vacina': forms.TextInput(attrs={'class': 'form-control'}),
        }

class ConsultaForm(forms.ModelForm):
    class Meta:
        model = Consulta
        fields = '__all__'
        widgets = {
            'id_animal': forms.Select(attrs={'class': 'form-control'}),
            'id_veterinario': forms.Select(attrs={'class': 'form-control'}),
            'data_consulta': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'hora_consulta': forms.TimeInput(attrs={'type': 'time', 'class': 'form-control'}),
            'descricao': forms.Textarea(attrs={'class': 'form-control'}),
        }

class AplicacaoVacinaForm(forms.ModelForm):
    class Meta:
        model = AplicacaoVacina
        fields = '__all__'
        widgets = {
            'id_animal': forms.Select(attrs={'class': 'form-control'}),
            'id_vacina': forms.Select(attrs={'class': 'form-control'}),
            'id_veterinario': forms.Select(attrs={'class': 'form-control'}),
            'data_aplicacao': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
        }

class TratamentoForm(forms.ModelForm):
    class Meta:
        model = Tratamento
        fields = '__all__'
        widgets = {
            'nome_tratamento': forms.TextInput(attrs={'class': 'form-control'}),
            'tipo_tratamento': forms.TextInput(attrs={'class': 'form-control'}),
            'descricao': forms.Textarea(attrs={'class': 'form-control'}),
        }

class RealizacaoTratamentoForm(forms.ModelForm):
    class Meta:
        model = RealizacaoTratamento
        fields = '__all__'
        widgets = {
            'id_animal': forms.Select(attrs={'class': 'form-control'}),
            'id_tratamento': forms.Select(attrs={'class': 'form-control'}),
            'id_veterinario': forms.Select(attrs={'class': 'form-control'}),
            'data_realizacao': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'observacoes': forms.Textarea(attrs={'class': 'form-control'}),
        }

class AgendamentoForm(forms.ModelForm):
    class Meta:
        model = Agendamento
        fields = '__all__'
        widgets = {
            'id_animal': forms.Select(attrs={'class': 'form-control'}),
            'id_veterinario': forms.Select(attrs={'class': 'form-control'}),
            'data_agendamento': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'hora_agendamento': forms.TimeInput(attrs={'type': 'time', 'class': 'form-control'}),
            'tipo_servico': forms.TextInput(attrs={'class': 'form-control'}),
            'observacoes': forms.Textarea(attrs={'class': 'form-control'}),
        }

##templates/base.html

<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{% block title %}PetVida{% endblock %}</title>

  <!-- Bootstrap 5 CDN -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
   .bg-menu-custom {
    background-color: #03bb85; /* verde agua */
  }
    body {
      background-color: #f8f9fa;
    }
    .navbar {
      margin-bottom: 20px;
    }
  </style>
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-menu-custom">
    <div class="container-fluid">
      <a class="navbar-brand" href="{% url 'menu' %}">Menu Clínica PetVida </a>
    </div>
  </nav>

  <main class="container">
    {% block content %}
    <!-- Conteúdo das páginas filhas -->
    {% endblock %}
  </main>

  <!-- Bootstrap Bundle JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

##templates/menu.html

{% extends 'base.html' %}

{% block content %}
<style>
    .menu-container {
        max-width: 900px;
        margin: 0 auto;
    }
    .menu-title {
        text-align: center;
        margin-bottom: 30px;
    }
    .menu-item {
        margin-bottom: 10px;
        font-weight: 500;
        transition: background 0.2s ease-in-out;
    }
    .menu-item:hover {
        background-color: #e9ecef;
    }
    .menu-icon {
        margin-right: 8px;
    }
</style>

<div class="container menu-container mt-5">
    <h2 class="menu-title">Menu Principal</h2>
    <div class="row">
        <!-- Coluna 1 -->
        <div class="col-md-6">
            <div class="list-group">
                <a href="{% url 'cadastrar_cliente' %}" class="list-group-item list-group-item-action menu-item">
                    👤 Cadastrar Cliente
                </a>
                <a href="{% url 'cadastrar_animal' %}" class="list-group-item list-group-item-action menu-item">
                    🐾 Cadastrar Animal
                </a>
                <a href="{% url 'cadastrar_veterinario' %}" class="list-group-item list-group-item-action menu-item">
                    🩺 Cadastrar Veterinário
                </a>
                <a href="{% url 'cadastrar_vacina' %}" class="list-group-item list-group-item-action menu-item">
                    💉 Cadastrar Vacina
                </a>
                <a href="{% url 'cadastrar_consulta' %}" class="list-group-item list-group-item-action menu-item">
                    📅 Cadastrar Consulta
                </a>
                <a href="{% url 'cadastrar_agendamento' %}" class="list-group-item list-group-item-action menu-item">
                    ⏰ Agendar Atendimento
                </a>
            </div>
        </div>

        <!-- Coluna 2 -->
        <div class="col-md-6">
            <div class="list-group">
                <a href="{% url 'cadastrar_aplicacao_vacina' %}" class="list-group-item list-group-item-action menu-item">
                    🐶 Aplicar Vacina
                </a>
                <a href="{% url 'cadastrar_tratamento_realizado' %}" class="list-group-item list-group-item-action menu-item">
                    💊 Registrar Tratamento
                </a>
                <a href="{% url 'listar_clientes' %}" class="list-group-item list-group-item-action menu-item">
                    📋 Listar Clientes
                </a>
                <a href="{% url 'listar_animais' %}" class="list-group-item list-group-item-action menu-item">
                    🐕 Listar Animais
                </a>
                <a href="{% url 'listar_veterinarios' %}" class="list-group-item list-group-item-action menu-item">
                    👨‍⚕️ Listar Veterinários
                </a>
                <a href="{% url 'listar_vacinas' %}" class="list-group-item list-group-item-action menu-item">
                    💉 Listar Vacinas
                </a>
            </div>
        </div>
    </div>
</div>
{% endblock %}

